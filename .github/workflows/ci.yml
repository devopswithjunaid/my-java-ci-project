name: Java CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY: docker.io
  IMAGE_REPO: devopswithjunaid/junaid
  JAVA_VERSION: '8'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Run tests
        run: ./gradlew test

      - name: Generate test report
        run: ./gradlew jacocoTestReport
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar

  docker-build-push:
    name: Docker Build & Push
    needs: build-and-test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Generate Docker tags
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          BRANCH=${GITHUB_REF_NAME}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          if [ "$BRANCH" == "master" ] || [ "$BRANCH" == "main" ]; then
            MAIN_TAG="java-v1.0.${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
            LATEST_TAG="java-latest"
          elif [ "$BRANCH" == "develop" ]; then
            MAIN_TAG="java-dev-${SHORT_SHA}"
            LATEST_TAG="java-dev-latest"
          else
            MAIN_TAG="java-${BRANCH}-${SHORT_SHA}"
            LATEST_TAG="java-${BRANCH}-latest"
          fi
          
          echo "main_tag=${MAIN_TAG}" >> $GITHUB_OUTPUT
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.main_tag }}
            ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image Summary
        run: |
          echo "Repository: ${{ env.IMAGE_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ steps.meta.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "Short SHA: ${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags:" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.main_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Pull commands:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.main_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    needs: docker-build-push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_REPO }}:${{ needs.docker-build-push.outputs.latest_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
